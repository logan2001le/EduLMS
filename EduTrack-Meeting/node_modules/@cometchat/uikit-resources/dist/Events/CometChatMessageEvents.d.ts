import { CardMessage, CustomInteractiveMessage, FormMessage, SchedulerMessage } from '../Models/InteractiveMessage';
import { MessageStatus } from '../Enums/Enums';
import { Subject } from 'rxjs';
export declare class CometChatMessageEvents {
    static ccMessageSent: Subject<IMessages>;
    static ccMessageEdited: Subject<IMessages>;
    static ccMessageTranslated: Subject<IMessages>;
    static ccLiveReaction: Subject<string>;
    static ccMessageRead: Subject<CometChat.BaseMessage>;
    static ccMessageDeleted: Subject<CometChat.BaseMessage>;
    /**
     * name of the event to publish
     * @param  {any} event
     * item to pass in that event
     * @param  {any} item
     */
    static publishEvent(event: any, item?: any): void;
    static onTextMessageReceived: Subject<CometChat.TextMessage>;
    static onMediaMessageReceived: Subject<CometChat.MediaMessage>;
    static onCustomMessageReceived: Subject<CometChat.CustomMessage>;
    static onTypingStarted: Subject<CometChat.TypingIndicator>;
    static onTypingEnded: Subject<CometChat.TypingIndicator>;
    static onMessagesDelivered: Subject<CometChat.MessageReceipt>;
    static onMessagesRead: Subject<CometChat.MessageReceipt>;
    static onMessageEdited: Subject<CometChat.BaseMessage>;
    static onMessageDeleted: Subject<CometChat.BaseMessage>;
    static onTransientMessageReceived: Subject<CometChat.TransientMessage>;
    static onCustomInteractiveMessageReceived: Subject<CustomInteractiveMessage>;
    static onFormMessageReceived: Subject<FormMessage>;
    static onCardMessageReceived: Subject<CardMessage>;
    static onInteractionGoalCompleted: Subject<CometChat.InteractionReceipt>;
    static onSchedulerMessageReceived: Subject<SchedulerMessage>;
}
export interface IMessages {
    message: CometChat.BaseMessage;
    status: MessageStatus;
}
//# sourceMappingURL=CometChatMessageEvents.d.ts.map