import { CometChatUIKitConstants, CometChatMessageTemplate, CometChatTheme, CometChatMessageComposerAction, localize, fontHelper } from "@cometchat/uikit-resources";
import { PollsConstants } from "@cometchat/uikit-shared";
import { ChatConfigurator } from "../../Shared/Framework/ChatConfigurator";
import { DataSourceDecorator } from "../../Shared/Framework/DataSourceDecorator";
export class PollsExtensionDecorator extends DataSourceDecorator {
    constructor(dataSource) {
        super(dataSource);
    }
    getId() {
        return "polls";
    }
    getAllMessageTypes() {
        const types = super.getAllMessageTypes();
        if (!types.includes(PollsConstants.extension_poll)) {
            types.push(PollsConstants.extension_poll);
        }
        return types;
    }
    getAllMessageCategories() {
        const categories = super.getAllMessageCategories();
        if (!categories.includes(CometChatUIKitConstants.MessageCategory.custom)) {
            categories.push(CometChatUIKitConstants.MessageCategory.custom);
        }
        return categories;
    }
    checkIfTemplateExist(template, type) {
        return template.some(obj => obj.type === type);
    }
    getAllMessageTemplates() {
        const templates = super.getAllMessageTemplates();
        if (!this.checkIfTemplateExist(templates, PollsConstants.extension_poll)) {
            templates.push(this.getPollsTemplate());
        }
        return templates;
    }
    getPollsTemplate() {
        return new CometChatMessageTemplate({
            type: PollsConstants.extension_poll,
            category: CometChatUIKitConstants.MessageCategory.custom,
            options: (loggedInUser, messageObject, theme, group) => {
                return ChatConfigurator.getDataSource().getCommonOptions(loggedInUser, messageObject, theme, group);
            }
        });
    }
    getAttachmentOptions(theme = new CometChatTheme({}), user, group, id) {
        if (!id?.parentMessageId) {
            const messageComposerActions = super.getAttachmentOptions(theme, user, group, id);
            let newAction = new CometChatMessageComposerAction({
                id: PollsConstants.extension_poll,
                title: localize("POLLS"),
                iconURL: "assets/polls.svg",
                iconTint: theme.palette.getAccent700(),
                titleColor: theme.palette.getAccent600(),
                titleFont: fontHelper(theme.typography.subtitle1),
                background: theme.palette.getAccent100(),
                onClick: null
            });
            messageComposerActions.push(newAction);
            return messageComposerActions;
        }
        else {
            return super.getAttachmentOptions(theme, user, group, id);
        }
    }
    getLastConversationMessage(conversation, loggedInUser) {
        const message = conversation.getLastMessage();
        if (message != null && message.getType() == PollsConstants.extension_poll && message.getCategory() == CometChatUIKitConstants.MessageCategory.custom) {
            return localize("CUSTOM_MESSAGE_POLL");
        }
        else {
            return super.getLastConversationMessage(conversation, loggedInUser);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,