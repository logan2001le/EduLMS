import { ChangeDetectionStrategy, Component, Input, } from "@angular/core";
import { CometChatMessageEvents, MessageStatus, fontHelper, localize } from "@cometchat/uikit-resources";
import { MessageComposerConfiguration, MessageListConfiguration, ThreadedMessagesStyle } from "@cometchat/uikit-shared";
import { ChatConfigurator } from "../../Shared/Framework/ChatConfigurator";
import { CometChat } from "@cometchat/chat-sdk-javascript";
import { CometChatException } from "../../Shared/Utils/ComeChatException";
import * as i0 from "@angular/core";
import * as i1 from "../../CometChatTheme.service";
import * as i2 from "../../CometChatMessageList/cometchat-message-list/cometchat-message-list.component";
import * as i3 from "../../CometChatMessageComposer/cometchat-message-composer/cometchat-message-composer.component";
import * as i4 from "@angular/common";
/**
*
* CometChatThreadedMessagesComponent is a wrapper component for messageList, messageBubble, messageComposer  component.
*
* @version 1.0.0
* @author CometChatTeam
* @copyright Â© 2022 CometChat Inc.
*
*/
export class CometChatThreadedMessagesComponent {
    constructor(ref, themeService) {
        this.ref = ref;
        this.themeService = themeService;
        this.title = localize("THREAD");
        this.closeIconURL = "assets/close2x.svg";
        this.messageListConfiguration = new MessageListConfiguration({});
        this.messageComposerConfiguration = new MessageComposerConfiguration({});
        this.threadedMessagesStyle = {
            width: "100%",
            height: "100%",
            background: "white",
            borderRadius: "none",
            border: "1px solid rgba(20, 20, 20, 0.1)",
            titleColor: "rgba(20, 20, 20)",
            titleFont: "700 22px Inter",
            closeIconTint: "#3399FF"
        };
        this.limit = 30;
        this.composerStyles = {
            width: "100%",
            height: "100%",
            border: "none",
            borderRadius: "12px",
            background: this.themeService.theme.palette.getAccent900(),
            inputBackground: this.themeService.theme.palette.getSecondary(),
            textFont: fontHelper(this.themeService.theme.typography.subtitle1),
            textColor: this.themeService.theme.palette.getAccent(), // done
        };
        this.avatarStyle = {
            borderRadius: "16px",
            width: "28px",
            height: "28px",
            border: "none",
            backgroundColor: "white",
            nameTextColor: "rgb(20,20,20)",
            backgroundSize: "cover",
            nameTextFont: "500 16px Inter",
            outerViewBorderSpacing: "",
        };
        this.statusIndicatorStyle = {
            borderRadius: "16px",
            width: "10px",
            height: "10px",
            border: "none",
        };
        this.listItemStyle = {
            background: "white",
            titleColor: "black",
            titleFont: "500 16px Inter",
            width: "",
            height: "100%",
            border: "none",
            borderRadius: "2px",
            separatorColor: "",
            activeBackground: "transparent",
            hoverBackground: "transparent"
        };
        this.actionButtonStyle = {
            height: "100%",
            width: "100%",
            border: "none",
            borderTop: "1px solid #e1e1e1",
            borderBottom: "1px solid #e1e1e1",
            borderRadius: "0",
            background: "transparent",
            buttonTextFont: "500 15px Inter",
            buttonTextColor: "black",
            padding: "8px"
        };
        this.buttonStyle = {
            height: "24px",
            width: "24px",
            border: "none",
            borderRadius: "0",
            background: "transparent",
            buttonIconTint: "#7dbfff"
        };
        this.titleStyle = {
            textFont: "700 22px Inter",
            textColor: "black",
            background: "transparent",
        };
    }
    ngOnInit() {
        this.requestBuilder = new CometChat.MessagesRequestBuilder()
            .setCategories(ChatConfigurator.getDataSource().getAllMessageCategories())
            .setTypes(ChatConfigurator.getDataSource().getAllMessageTypes())
            .hideReplies(true)
            .setLimit(this.limit)
            .setParentMessageId(this.parentMessage.getId());
        this.addMessageEventListeners();
        CometChat.getLoggedinUser().then((user) => {
            this.loggedInUser = user;
            if (this.parentMessage?.getSender().getUid() === this.loggedInUser?.getUid()) {
                if (this.parentMessage?.getReceiverType() === CometChat.RECEIVER_TYPE.USER) {
                    this.user = this.parentMessage.getReceiver();
                }
                else {
                    this.group = this.parentMessage.getReceiver();
                }
                this.ref.detectChanges();
            }
            else if (this.parentMessage?.getReceiverType() === CometChat.RECEIVER_TYPE.USER) {
                this.user = this.parentMessage?.getSender();
                this.ref.detectChanges();
            }
            else if (this.parentMessage?.getReceiverType() === CometChat.RECEIVER_TYPE.GROUP) {
                this.group = this.parentMessage?.getReceiver();
                this.ref.detectChanges();
            }
        }).catch((error) => {
            if (this.onError) {
                this.onError(error);
            }
        });
        this.setTheme();
        this.subscribeToEvents();
    }
    ngOnChanges(change) {
    }
    ngOnDestroy() {
        this.unsubscribeToEvents();
        try {
            //Removing Message Listeners
            this.onMessagesDelivered?.unsubscribe();
            this.onMessagesRead?.unsubscribe();
            this.onMessageDeleted?.unsubscribe();
            this.onMessageEdited?.unsubscribe();
        }
        catch (error) {
            if (this.onError) {
                this.onError(CometChatException(error));
            }
        }
    }
    updateMessage(message) {
        if (this.parentMessage?.getId() == message.getId()) {
            this.parentMessage = message;
            this.ref.detectChanges();
        }
    }
    updateReceipt(messageReceipt) {
        if (Number(messageReceipt?.getMessageId()) == this.parentMessage?.getId()) {
            if (messageReceipt.getReadAt()) {
                this.parentMessage.setReadAt(messageReceipt.getReadAt());
            }
            else if (messageReceipt.getDeliveredAt()) {
                this.parentMessage.setDeliveredAt(messageReceipt.getDeliveredAt());
            }
            this.ref.detectChanges();
        }
    }
    addMessageEventListeners() {
        try {
            this.onMessagesDelivered = CometChatMessageEvents.onMessagesDelivered.subscribe((messageReceipt) => {
                this.updateReceipt(messageReceipt);
            });
            this.onMessagesRead = CometChatMessageEvents.onMessagesRead.subscribe((messageReceipt) => {
                this.updateReceipt(messageReceipt);
            });
            this.onMessageDeleted = CometChatMessageEvents.onMessageDeleted.subscribe((deletedMessage) => {
                this.updateMessage(deletedMessage);
            });
            this.onMessageEdited = CometChatMessageEvents.onMessageEdited.subscribe((editedMessage) => {
                this.updateMessage(editedMessage);
            });
            this.onTextMessageReceived =
                CometChatMessageEvents.onTextMessageReceived.subscribe((message) => {
                    if (message.getParentMessageId() && message.getParentMessageId() == this.parentMessage?.getId()) {
                        this.ref.detectChanges();
                    }
                });
            this.onMediaMessageReceived =
                CometChatMessageEvents.onMediaMessageReceived.subscribe((message) => {
                    if (message.getParentMessageId() && message.getParentMessageId() == this.parentMessage?.getId()) {
                        this.ref.detectChanges();
                    }
                });
            this.onCustomMessageReceived =
                CometChatMessageEvents.onCustomMessageReceived.subscribe((message) => {
                    if (message.getParentMessageId() && message.getParentMessageId() == this.parentMessage?.getId()) {
                        this.ref.detectChanges();
                    }
                });
            this.onFormMessageReceived =
                CometChatMessageEvents.onFormMessageReceived.subscribe((message) => {
                    if (message.getParentMessageId() && message.getParentMessageId() == this.parentMessage?.getId()) {
                        this.ref.detectChanges();
                    }
                });
            this.onSchedulerMessageReceived =
                CometChatMessageEvents.onSchedulerMessageReceived.subscribe((message) => {
                    if (message.getParentMessageId() && message.getParentMessageId() == this.parentMessage?.getId()) {
                        this.ref.detectChanges();
                    }
                });
            this.onCardMessageReceived =
                CometChatMessageEvents.onCardMessageReceived.subscribe((message) => {
                    if (message.getParentMessageId() && message.getParentMessageId() == this.parentMessage?.getId()) {
                        this.ref.detectChanges();
                    }
                });
            this.onCustomInteractiveMessageReceived =
                CometChatMessageEvents.onCustomInteractiveMessageReceived.subscribe((message) => {
                    if (message.getParentMessageId() && message.getParentMessageId() == this.parentMessage?.getId()) {
                        this.ref.detectChanges();
                    }
                });
        }
        catch (error) {
            if (this.onError) {
                this.onError(CometChatException(error));
            }
        }
    }
    getThreadCount() {
        const replyCount = this.parentMessage?.getReplyCount() || 0;
        const suffix = replyCount === 1 ? localize("REPLY") : localize("REPLIES");
        return `${replyCount} ${suffix}`;
    }
    subscribeToEvents() {
        this.ccMessageSent = CometChatMessageEvents.ccMessageSent.subscribe(({ status, message }) => {
            if (status === MessageStatus.success && message?.getParentMessageId() === this.parentMessage?.getId()) {
                this.ref.detectChanges();
            }
        });
        this.ccMessageEdited = CometChatMessageEvents.ccMessageEdited.subscribe(({ status, message }) => {
            if (status === MessageStatus.success && message?.getId() === this.parentMessage?.getId()) {
                this.ref.detectChanges();
            }
        });
        this.ccMessageDeleted = CometChatMessageEvents.ccMessageDeleted.subscribe((message) => {
            if (message?.getId() === this.parentMessage?.getId()) {
                this.ref.detectChanges();
            }
        });
        this.ccMessageRead = CometChatMessageEvents.ccMessageRead.subscribe((message) => {
            if (message?.getId() === this.parentMessage?.getId()) {
                this.ref.detectChanges();
            }
        });
    }
    unsubscribeToEvents() {
        this.ccMessageDeleted?.unsubscribe();
        this.ccMessageEdited?.unsubscribe();
        this.ccMessageRead?.unsubscribe();
        this.ccMessageSent?.unsubscribe();
        this.onCardMessageReceived?.unsubscribe();
        this.onFormMessageReceived?.unsubscribe();
        this.onSchedulerMessageReceived?.unsubscribe();
        this.onTextMessageReceived?.unsubscribe();
        this.onCustomInteractiveMessageReceived?.unsubscribe();
        this.onCustomMessageReceived?.unsubscribe();
        this.onMediaMessageReceived?.unsubscribe();
    }
    closeView() {
        if (this.onClose) {
            this.onClose();
        }
    }
    setThreadedMessagesStyle() {
        let defaultStyle = new ThreadedMessagesStyle({
            width: "100%",
            height: "100%",
            background: this.themeService.theme.palette.getBackground(),
            borderRadius: "none",
            border: "none",
            titleColor: this.themeService.theme.palette.getAccent(),
            titleFont: fontHelper(this.themeService.theme.typography.title1),
            closeIconTint: this.themeService.theme.palette.getPrimary()
        });
        this.threadedMessagesStyle = {
            ...defaultStyle,
            ...this.threadedMessagesStyle
        };
    }
    setTheme() {
        this.setThreadedMessagesStyle();
        this.buttonStyle.buttonIconTint = this.threadedMessagesStyle.closeIconTint || this.themeService.theme.palette.getPrimary();
        this.actionButtonStyle.background = this.themeService.theme.palette.getBackground();
        this.actionButtonStyle.buttonTextFont = fontHelper(this.themeService.theme.typography.subtitle1);
        this.actionButtonStyle.buttonTextColor = this.themeService.theme.palette.getAccent600();
        this.titleStyle = {
            textFont: this.threadedMessagesStyle.titleFont || fontHelper(this.themeService.theme.typography.title1),
            textColor: this.threadedMessagesStyle.titleColor || this.themeService.theme.palette.getAccent(),
            background: "transparent"
        };
        this.ref.detectChanges();
    }
    wrapperStyle() {
        return {
            background: this.threadedMessagesStyle.background || this.themeService.theme.palette.getBackground(),
            height: this.threadedMessagesStyle.height,
            width: this.threadedMessagesStyle.width,
            border: this.threadedMessagesStyle.border,
            borderRadius: this.threadedMessagesStyle.borderRadius
        };
    }
}
CometChatThreadedMessagesComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: CometChatThreadedMessagesComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.CometChatThemeService }], target: i0.ÉµÉµFactoryTarget.Component });
CometChatThreadedMessagesComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: CometChatThreadedMessagesComponent, selector: "cometchat-threaded-messages", inputs: { onClose: "onClose", onError: "onError", parentMessage: "parentMessage", title: "title", closeIconURL: "closeIconURL", bubbleView: "bubbleView", messageActionView: "messageActionView", messageListConfiguration: "messageListConfiguration", messageComposerConfiguration: "messageComposerConfiguration", threadedMessagesStyle: "threadedMessagesStyle" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"cc-threaded-messages__wrapper\" [ngStyle]=\"wrapperStyle()\">\n  <div class=\"cc-threaded-messages__header\">\n    <div class=\"cc-threaded-messages__title\">\n      <cometchat-label [text]=\"title\"\n        [labelStyle]=\"titleStyle\"></cometchat-label>\n    </div>\n    <div class=\"cc-threaded-messages__close\">\n      <cometchat-button [iconURL]=\"closeIconURL\" [buttonStyle]=\"buttonStyle\"\n        (cc-button-clicked)=\"closeView()\"></cometchat-button>\n    </div>\n  </div>\n  <div class=\"cc-threaded-messages__bubble-view\">\n    <ng-container\n      *ngTemplateOutlet=\"bubbleView; context:{ $implicit: parentMessage }\">\n    </ng-container>\n  </div>\n  <div class=\"cc-threaded-messages__action-view\">\n    <ng-container\n      *ngTemplateOutlet=\"messageActionView; context:{ $implicit: parentMessage }\">\n    </ng-container>\n    <cometchat-button *ngIf=\"!messageActionView\" [text]=\"getThreadCount()\"\n      [buttonStyle]=\"actionButtonStyle\"></cometchat-button>\n  </div>\n  <div class=\"cc-threaded-messages__list\">\n    <cometchat-message-list #messageListRef\n      [parentMessageId]=\"parentMessage!.getId()\"\n      [emptyStateView]=\"messageListConfiguration.emptyStateView\"\n      [loadingStateView]=\"messageListConfiguration.loadingStateView\"\n      [user]=\"user\" [group]=\"group\"\n      [errorStateView]=\"messageListConfiguration.errorStateView\"\n      [disableReceipt]=\"messageListConfiguration.disableReceipt\"\n      [readIcon]=\"messageListConfiguration.readIcon\"\n      [deliveredIcon]=\"messageListConfiguration.deliveredIcon\"\n      [sentIcon]=\"messageListConfiguration.sentIcon\"\n      [waitIcon]=\"messageListConfiguration.waitIcon\"\n      [errorIcon]=\"messageListConfiguration.errorIcon\"\n      [alignment]=\"messageListConfiguration.alignment\"\n      [showAvatar]=\"messageListConfiguration.showAvatar\"\n      [datePattern]=\"messageListConfiguration.datePattern\"\n      [timestampAlignment]=\"messageListConfiguration.timestampAlignment\"\n      [DateSeparatorPattern]=\"messageListConfiguration.DateSeparatorPattern\"\n      [messageTypes]=\"messageListConfiguration.templates\"\n      [messagesRequestBuilder]=\"messageListConfiguration.messagesRequestBuilder || requestBuilder\"\n      [thresholdValue]=\"messageListConfiguration.thresholdValue\"\n      [onThreadRepliesClick]=\"messageListConfiguration.onThreadRepliesClick\"\n      [headerView]=\"messageListConfiguration.headerView\"\n      [footerView]=\"messageListConfiguration.footerView\"\n      [avatarStyle]=\"messageListConfiguration.avatarStyle\"\n      [dateSeparatorStyle]=\"messageListConfiguration.dateSeparatorStyle\"\n      [messageListStyle]=\"messageListConfiguration.messageListStyle\"\n      [onError]=\"messageListConfiguration.onError\">\n    </cometchat-message-list>\n  </div>\n  <div class=\"cc-threaded-messages__composer\">\n    <cometchat-message-composer #messageComposerRef\n      [parentMessageId]=\"parentMessage!.getId()\" [user]=\"user\" [group]=\"group\"\n      [text]=\"messageComposerConfiguration.text\"\n      [headerView]=\"messageComposerConfiguration.headerView\"\n      [onTextChange]=\"messageComposerConfiguration.onTextChange\"\n      [attachmentIconURL]=\"messageComposerConfiguration.attachmentIconURL\"\n      [attachmentOptions]=\"messageComposerConfiguration.attachmentOptions\"\n      [secondaryButtonView]=\"messageComposerConfiguration.secondaryButtonView\"\n      [auxilaryButtonView]=\"messageComposerConfiguration.auxilaryButtonView\"\n      [auxiliaryButtonsAlignment]=\"messageComposerConfiguration.auxiliaryButtonsAlignment\"\n      [sendButtonView]=\"messageComposerConfiguration.sendButtonView\"\n      [hideLiveReaction]=\"messageComposerConfiguration.hideLiveReaction\"\n      [LiveReactionIconURL]=\"messageComposerConfiguration.LiveReactionIconURL\"\n      [messageComposerStyle]=\"messageComposerConfiguration.messageComposerStyle\"\n      [onSendButtonClick]=\"messageComposerConfiguration.onSendButtonClick\"\n      [onSendButtonClick]=\"messageComposerConfiguration.onSendButtonClick\"\n      [onError]=\"messageComposerConfiguration.onError\"\n      [actionSheetStyle]=\"messageComposerConfiguration.actionSheetStyle\">\n    </cometchat-message-composer>\n  </div>\n</div>\n", styles: ["*{box-sizing:border-box;margin:0;padding:0}.cc-threaded-messages__wrapper{display:flex;flex-direction:column;height:100%;overflow-y:auto}.cc-threaded-messages__header{height:8%;width:100%;display:flex;padding:16px;align-items:flex-start}.cc-threaded-messages__close{display:flex;align-items:center}.cc-threaded-messages__title{display:flex;align-items:center;justify-content:center;width:100%}.cc-threaded-messages__bubble-view{width:100%}.cc-threaded-messages__header{flex:0 0 auto}.cc-threaded-messages__list{flex:1 1 auto;min-height:65%}.cc-threaded-messages__composer{flex:0 0 auto;min-height:80px}\n"], components: [{ type: i2.CometChatMessageListComponent, selector: "cometchat-message-list", inputs: ["hideError", "errorStateView", "loadingStateView", "emptyStateView", "errorStateText", "emptyStateText", "loadingIconURL", "user", "group", "disableReceipt", "disableSoundForMessages", "customSoundForMessages", "readIcon", "deliveredIcon", "sentIcon", "waitIcon", "errorIcon", "aiErrorIcon", "aiEmptyIcon", "alignment", "showAvatar", "datePattern", "timestampAlignment", "DateSeparatorPattern", "templates", "messagesRequestBuilder", "newMessageIndicatorText", "scrollToBottomOnNewMessages", "thresholdValue", "unreadMessageThreshold", "apiConfiguration", "onThreadRepliesClick", "headerView", "footerView", "parentMessageId", "avatarStyle", "backdropStyle", "dateSeparatorStyle", "messageListStyle", "onError", "messageInformationConfiguration"] }, { type: i3.CometChatMessageComposerComponent, selector: "cometchat-message-composer", inputs: ["user", "group", "disableSoundForMessages", "customSoundForMessage", "disableTypingEvents", "text", "placeholderText", "headerView", "onTextChange", "attachmentIconURL", "attachmentOptions", "secondaryButtonView", "auxilaryButtonView", "auxiliaryButtonsAlignment", "sendButtonView", "parentMessageId", "hideLiveReaction", "LiveReactionIconURL", "backButtonIconURL", "messageComposerStyle", "onSendButtonClick", "onError", "backdropStyle", "actionSheetStyle", "aiActionSheetStyle", "hideVoiceRecording", "mediaRecorderStyle", "aiOptionsStyle", "aiIconURL", "voiceRecordingIconURL", "voiceRecordingCloseIconURL", "voiceRecordingStartIconURL", "voiceRecordingStopIconURL", "voiceRecordingSubmitIconURL"], outputs: ["childEvent"] }], directives: [{ type: i4.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: CometChatThreadedMessagesComponent, decorators: [{
            type: Component,
            args: [{ selector: "cometchat-threaded-messages", changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"cc-threaded-messages__wrapper\" [ngStyle]=\"wrapperStyle()\">\n  <div class=\"cc-threaded-messages__header\">\n    <div class=\"cc-threaded-messages__title\">\n      <cometchat-label [text]=\"title\"\n        [labelStyle]=\"titleStyle\"></cometchat-label>\n    </div>\n    <div class=\"cc-threaded-messages__close\">\n      <cometchat-button [iconURL]=\"closeIconURL\" [buttonStyle]=\"buttonStyle\"\n        (cc-button-clicked)=\"closeView()\"></cometchat-button>\n    </div>\n  </div>\n  <div class=\"cc-threaded-messages__bubble-view\">\n    <ng-container\n      *ngTemplateOutlet=\"bubbleView; context:{ $implicit: parentMessage }\">\n    </ng-container>\n  </div>\n  <div class=\"cc-threaded-messages__action-view\">\n    <ng-container\n      *ngTemplateOutlet=\"messageActionView; context:{ $implicit: parentMessage }\">\n    </ng-container>\n    <cometchat-button *ngIf=\"!messageActionView\" [text]=\"getThreadCount()\"\n      [buttonStyle]=\"actionButtonStyle\"></cometchat-button>\n  </div>\n  <div class=\"cc-threaded-messages__list\">\n    <cometchat-message-list #messageListRef\n      [parentMessageId]=\"parentMessage!.getId()\"\n      [emptyStateView]=\"messageListConfiguration.emptyStateView\"\n      [loadingStateView]=\"messageListConfiguration.loadingStateView\"\n      [user]=\"user\" [group]=\"group\"\n      [errorStateView]=\"messageListConfiguration.errorStateView\"\n      [disableReceipt]=\"messageListConfiguration.disableReceipt\"\n      [readIcon]=\"messageListConfiguration.readIcon\"\n      [deliveredIcon]=\"messageListConfiguration.deliveredIcon\"\n      [sentIcon]=\"messageListConfiguration.sentIcon\"\n      [waitIcon]=\"messageListConfiguration.waitIcon\"\n      [errorIcon]=\"messageListConfiguration.errorIcon\"\n      [alignment]=\"messageListConfiguration.alignment\"\n      [showAvatar]=\"messageListConfiguration.showAvatar\"\n      [datePattern]=\"messageListConfiguration.datePattern\"\n      [timestampAlignment]=\"messageListConfiguration.timestampAlignment\"\n      [DateSeparatorPattern]=\"messageListConfiguration.DateSeparatorPattern\"\n      [messageTypes]=\"messageListConfiguration.templates\"\n      [messagesRequestBuilder]=\"messageListConfiguration.messagesRequestBuilder || requestBuilder\"\n      [thresholdValue]=\"messageListConfiguration.thresholdValue\"\n      [onThreadRepliesClick]=\"messageListConfiguration.onThreadRepliesClick\"\n      [headerView]=\"messageListConfiguration.headerView\"\n      [footerView]=\"messageListConfiguration.footerView\"\n      [avatarStyle]=\"messageListConfiguration.avatarStyle\"\n      [dateSeparatorStyle]=\"messageListConfiguration.dateSeparatorStyle\"\n      [messageListStyle]=\"messageListConfiguration.messageListStyle\"\n      [onError]=\"messageListConfiguration.onError\">\n    </cometchat-message-list>\n  </div>\n  <div class=\"cc-threaded-messages__composer\">\n    <cometchat-message-composer #messageComposerRef\n      [parentMessageId]=\"parentMessage!.getId()\" [user]=\"user\" [group]=\"group\"\n      [text]=\"messageComposerConfiguration.text\"\n      [headerView]=\"messageComposerConfiguration.headerView\"\n      [onTextChange]=\"messageComposerConfiguration.onTextChange\"\n      [attachmentIconURL]=\"messageComposerConfiguration.attachmentIconURL\"\n      [attachmentOptions]=\"messageComposerConfiguration.attachmentOptions\"\n      [secondaryButtonView]=\"messageComposerConfiguration.secondaryButtonView\"\n      [auxilaryButtonView]=\"messageComposerConfiguration.auxilaryButtonView\"\n      [auxiliaryButtonsAlignment]=\"messageComposerConfiguration.auxiliaryButtonsAlignment\"\n      [sendButtonView]=\"messageComposerConfiguration.sendButtonView\"\n      [hideLiveReaction]=\"messageComposerConfiguration.hideLiveReaction\"\n      [LiveReactionIconURL]=\"messageComposerConfiguration.LiveReactionIconURL\"\n      [messageComposerStyle]=\"messageComposerConfiguration.messageComposerStyle\"\n      [onSendButtonClick]=\"messageComposerConfiguration.onSendButtonClick\"\n      [onSendButtonClick]=\"messageComposerConfiguration.onSendButtonClick\"\n      [onError]=\"messageComposerConfiguration.onError\"\n      [actionSheetStyle]=\"messageComposerConfiguration.actionSheetStyle\">\n    </cometchat-message-composer>\n  </div>\n</div>\n", styles: ["*{box-sizing:border-box;margin:0;padding:0}.cc-threaded-messages__wrapper{display:flex;flex-direction:column;height:100%;overflow-y:auto}.cc-threaded-messages__header{height:8%;width:100%;display:flex;padding:16px;align-items:flex-start}.cc-threaded-messages__close{display:flex;align-items:center}.cc-threaded-messages__title{display:flex;align-items:center;justify-content:center;width:100%}.cc-threaded-messages__bubble-view{width:100%}.cc-threaded-messages__header{flex:0 0 auto}.cc-threaded-messages__list{flex:1 1 auto;min-height:65%}.cc-threaded-messages__composer{flex:0 0 auto;min-height:80px}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.CometChatThemeService }]; }, propDecorators: { onClose: [{
                type: Input
            }], onError: [{
                type: Input
            }], parentMessage: [{
                type: Input
            }], title: [{
                type: Input
            }], closeIconURL: [{
                type: Input
            }], bubbleView: [{
                type: Input
            }], messageActionView: [{
                type: Input
            }], messageListConfiguration: [{
                type: Input
            }], messageComposerConfiguration: [{
                type: Input
            }], threadedMessagesStyle: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,