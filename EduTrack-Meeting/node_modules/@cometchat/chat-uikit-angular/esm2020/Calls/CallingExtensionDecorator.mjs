import { CometChat } from "@cometchat/chat-sdk-javascript";
import { CometChatUIKitConstants, CometChatMessageTemplate, localize } from "@cometchat/uikit-resources";
import { CallingDetailsUtils } from "@cometchat/uikit-shared";
import { ChatConfigurator } from "../Shared/Framework/ChatConfigurator";
import { DataSourceDecorator } from "../Shared/Framework/DataSourceDecorator";
export class CallingExtensionDecorator extends DataSourceDecorator {
    constructor(dataSource) {
        super(dataSource);
        this.onLogout();
    }
    // end active call when user logs out
    onLogout() {
        var listenerID = "logout_listener";
        CometChat.addLoginListener(listenerID, new CometChat.LoginListener({
            logoutSuccess: () => {
                let call = CometChat.getActiveCall();
                if (call) {
                    CometChat.endCall(call.getSessionId());
                }
                else {
                    return;
                }
            },
            logoutFailure: (error) => {
                console.log("LoginListener :: logoutFailure", error);
            }
        }));
    }
    getAllMessageTypes() {
        const types = super.getAllMessageTypes();
        if (!types.includes(CometChatUIKitConstants.calls.meeting)) {
            types.push(CometChatUIKitConstants.calls.meeting);
        }
        if (!types.includes(CometChatUIKitConstants.MessageTypes.audio)) {
            types.push(CometChatUIKitConstants.MessageTypes.audio);
        }
        if (!types.includes(CometChatUIKitConstants.MessageTypes.video)) {
            types.push(CometChatUIKitConstants.MessageTypes.video);
        }
        return types;
    }
    getId() {
        return "calling";
    }
    getAllMessageCategories() {
        const categories = super.getAllMessageCategories();
        if (!categories.includes(CometChatUIKitConstants.MessageCategory.call)) {
            categories.push(CometChatUIKitConstants.MessageCategory.call);
        }
        if (!categories.includes(CometChatUIKitConstants.MessageCategory.custom)) {
            categories.push(CometChatUIKitConstants.MessageCategory.custom);
        }
        return categories;
    }
    checkIfTemplateTypeExist(template, type) {
        return template.some(obj => obj.type === type);
    }
    checkIfTemplateCategoryExist(template, category) {
        return template.some(obj => obj.category === category);
    }
    getAllMessageTemplates() {
        const templates = super.getAllMessageTemplates();
        if (!this.checkIfTemplateTypeExist(templates, CometChatUIKitConstants.calls.meeting)) {
            templates.push(this.getDirectCallTemplate());
        }
        if (!this.checkIfTemplateCategoryExist(templates, CometChatUIKitConstants.MessageCategory.call)) {
            templates.push(...this.getDefaultCallTemplate());
        }
        return templates;
    }
    getDirectCallTemplate() {
        return new CometChatMessageTemplate({
            type: CometChatUIKitConstants.calls.meeting,
            category: CometChatUIKitConstants.MessageCategory.custom,
            options: (loggedInUser, messageObject, theme, group) => {
                return ChatConfigurator.getDataSource().getCommonOptions(loggedInUser, messageObject, theme, group);
            }
        });
    }
    getDefaultCallTemplate() {
        let templates = [
            new CometChatMessageTemplate({
                type: CometChatUIKitConstants.MessageTypes.audio,
                category: CometChatUIKitConstants.MessageCategory.call,
            }),
            new CometChatMessageTemplate({
                type: CometChatUIKitConstants.MessageTypes.video,
                category: CometChatUIKitConstants.MessageCategory.call,
            })
        ];
        return templates;
    }
    getLastConversationMessage(conversation, loggedInUser) {
        let actionMessage = "";
        if (conversation.getLastMessage() && conversation.getLastMessage().category == CometChatUIKitConstants.MessageCategory.call) {
            let call = conversation.getLastMessage();
            actionMessage = CallingDetailsUtils.getCallStatus(call, loggedInUser);
        }
        else if (conversation?.getLastMessage() && conversation.getLastMessage().type == CometChatUIKitConstants.calls.meeting) {
            let message = conversation.getLastMessage();
            if (!message.getSender() || message?.getSender()?.getUid() == loggedInUser.getUid()) {
                actionMessage = localize("YOU_INITIATED_GROUP_CALL");
            }
            else {
                actionMessage = `${message.getSender().getName()}  ${localize("INITIATED_GROUP_CALL")}`;
            }
        }
        else {
            actionMessage = super.getLastConversationMessage(conversation, loggedInUser);
        }
        return actionMessage;
    }
}
//# sourceMappingURL=data:application/json;base64,