import { CometChatCallDetailsOption, CometChatCallDetailsTemplate, fontHelper, } from "@cometchat/uikit-resources";
export class CallDetailUtils {
    static getDefaultCallTemplate(callLog, loggedInUser, theme) {
        return [
            this.getPrimaryDetailsTemplate(callLog, loggedInUser, theme),
            this.getSecondaryDetailsTemplate(callLog, loggedInUser, theme),
        ];
    }
    static getPrimaryDetailsTemplate(callLog, loggedInUser, theme) {
        const template = new CometChatCallDetailsTemplate({
            id: "callControls",
            hideSectionSeparator: true,
            sectionSeparatorColor: "red",
            options: (user, group) => {
                return this.getPrimaryOptions(user ?? undefined, group ?? undefined, callLog ?? undefined, loggedInUser ?? undefined, theme ?? undefined);
            },
        });
        return template;
    }
    static getPrimaryOptions(user, group, callLog, loggedInUser, theme) {
        const options = [];
        if (user) {
            options.push(new CometChatCallDetailsOption({
                id: "calls",
            }));
        }
        options.push(new CometChatCallDetailsOption({
            id: "callStatus",
            title: callLog?.getInitiatedAt(),
            titleFont: fontHelper(theme.typography.subtitle1),
            backgroundColor: "rgba(20, 20, 20, 0.04)",
        }));
        return options;
    }
    static getSecondaryDetailsTemplate(callLog, loggedInUser, theme) {
        const template = new CometChatCallDetailsTemplate({
            id: "callOptions",
            hideSectionSeparator: true,
            options: () => {
                return this.getSecondaryOptions(callLog ?? undefined, theme ?? undefined);
            },
        });
        return template;
    }
    static getSecondaryOptions(callLog, theme) {
        const options = [];
        const localizedParticipants = "Participants";
        const localizedRecording = "Recordings";
        const localizedHistory = "History";
        options.push(new CometChatCallDetailsOption({
            id: "participants",
            title: localizedParticipants,
            tail: callLog.participants.length,
            backgroundColor: "rgba(20, 20, 20, 0.04)",
        }));
        if (callLog?.hasRecording) {
            options.push(new CometChatCallDetailsOption({
                id: "recordings",
                title: localizedRecording,
                tail: callLog.recordings.length,
                backgroundColor: "rgba(20, 20, 20, 0.04)",
            }));
        }
        options.push(new CometChatCallDetailsOption({
            id: "callHistory",
            title: localizedHistory,
            backgroundColor: "rgba(20, 20, 20, 0.04)",
        }));
        return options;
    }
}
//# sourceMappingURL=data:application/json;base64,