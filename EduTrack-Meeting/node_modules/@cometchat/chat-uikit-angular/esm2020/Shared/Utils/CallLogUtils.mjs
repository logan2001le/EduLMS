import { CometChatUIKitConstants, localize } from "@cometchat/uikit-resources";
export class CallLogUtils {
    static isSentByMe(call, loggedInUser) {
        const senderUid = call.getInitiator()?.getUid();
        return !senderUid || senderUid === loggedInUser?.getUid();
    }
    static isMissedCall(call, loggedInUser) {
        const callStatus = call.getStatus();
        const sentByMe = this.isSentByMe(call, loggedInUser);
        // If the user sent the call and it was unanswered, it's not counted as missed
        if (sentByMe && callStatus === CometChatUIKitConstants.calls.unanswered) {
            return false;
        }
        // The following statuses are considered missed for the receiver
        const missedStatuses = [
            CometChatUIKitConstants.calls.unanswered,
            CometChatUIKitConstants.calls.cancelled,
        ];
        // If the user didn't send the call and the status matches one of the missed statuses, it's a missed call
        return !sentByMe && missedStatuses.includes(callStatus);
    }
    static getCallStatusWithType(call, loggedInUser, includeType = false) {
        if (!call || !loggedInUser) {
            return "";
        }
        let callMessageText = "";
        const callStatus = call.getStatus();
        const sentByMe = this.isSentByMe(call, loggedInUser);
        const missedCall = this.isMissedCall(call, loggedInUser);
        const callTypeKey = "_";
        if (missedCall) {
            callMessageText = `MISSED${callTypeKey}CALL`;
        }
        else {
            switch (callStatus) {
                case CometChatUIKitConstants.calls.initiated:
                    callMessageText = sentByMe
                        ? `OUTGOING${callTypeKey}CALL`
                        : `INCOMING${callTypeKey}CALL`;
                    break;
                case CometChatUIKitConstants.calls.ongoing:
                    callMessageText = sentByMe
                        ? `ONGOING${callTypeKey}CALL`
                        : `ONGOING${callTypeKey}CALL`;
                    break;
                case CometChatUIKitConstants.calls.ended:
                    callMessageText = sentByMe
                        ? `OUTGOING${callTypeKey}CALL`
                        : `INCOMING${callTypeKey}CALL`;
                    break;
                case CometChatUIKitConstants.calls.unanswered:
                    callMessageText = sentByMe
                        ? `UNANSWERED${callTypeKey}CALL`
                        : `MISSED${callTypeKey}CALL`;
                    break;
                case CometChatUIKitConstants.calls.cancelled:
                    callMessageText = sentByMe
                        ? `CANCELLED${callTypeKey}CALL`
                        : `MISSED${callTypeKey}CALL`;
                    break;
                case CometChatUIKitConstants.calls.rejected:
                    callMessageText = sentByMe
                        ? `REJECTED${callTypeKey}CALL`
                        : `MISSED${callTypeKey}CALL`;
                    break;
                case CometChatUIKitConstants.calls.busy:
                    callMessageText = sentByMe
                        ? `UNANSWERED${callTypeKey}CALL`
                        : `MISSED${callTypeKey}CALL`;
                    break;
                default:
                    callMessageText = `INCOMING${callTypeKey}CALL`;
            }
        }
        return localize(callMessageText);
    }
    static convertMinutesToHoursMinutesSeconds(minutes) {
        const hours = Math.floor(minutes / 60);
        const remainingMinutes = Math.floor(minutes % 60);
        const seconds = Math.floor((minutes - Math.floor(minutes)) * 60);
        let hoursString = "";
        let minutesString = "";
        let secondsString = "";
        if (hours > 0) {
            hoursString = `${hours}h`;
        }
        if (remainingMinutes > 0) {
            minutesString = `${remainingMinutes}m`;
        }
        if (seconds >= 0) {
            secondsString = `${seconds}s`;
        }
        return `${hoursString} ${minutesString} ${secondsString}`;
    }
    static convertSecondsToHoursMinutesSeconds(seconds) {
        const hours = Math.floor(seconds / 3600);
        const remainingMinutes = Math.floor((seconds % 3600) / 60);
        const remainingSeconds = Math.floor((seconds % 3600) % 60);
        let hoursString = "";
        let minutesString = "";
        let secondsString = "";
        if (hours > 0) {
            hoursString = `${hours}h`;
        }
        if (remainingMinutes > 0) {
            minutesString = `${remainingMinutes}m`;
        }
        if (remainingSeconds >= 0) {
            secondsString = `${remainingSeconds}s`;
        }
        return `${hoursString} ${minutesString} ${secondsString}`;
    }
    static isDateDifferent(firstDate, secondDate) {
        let firstDateObj, secondDateObj;
        firstDateObj = new Date(firstDate * 1000);
        secondDateObj = new Date(secondDate * 1000);
        return (firstDateObj.getDate() !== secondDateObj.getDate() ||
            firstDateObj.getMonth() !== secondDateObj.getMonth() ||
            firstDateObj.getFullYear() !== secondDateObj.getFullYear());
    }
}
//# sourceMappingURL=data:application/json;base64,