import { CometChatTheme, } from "@cometchat/uikit-resources";
import { MessageUtils } from "../Utils/MessageUtils";
export class DataSourceDecorator {
    constructor(dataSource) {
        this.dataSource = dataSource;
    }
    getTextMessageOptions(loggedInUser, messageObject, theme, group) {
        return (this.dataSource ?? new MessageUtils()).getTextMessageOptions(loggedInUser, messageObject, theme, group);
    }
    getImageMessageOptions(loggedInUser, messageObject, theme, group) {
        return (this.dataSource ?? new MessageUtils()).getImageMessageOptions(loggedInUser, messageObject, theme, group);
    }
    getVideoMessageOptions(loggedInUser, messageObject, theme, group) {
        return (this.dataSource ?? new MessageUtils()).getVideoMessageOptions(loggedInUser, messageObject, theme, group);
    }
    getAudioMessageOptions(loggedInUser, messageObject, theme, group) {
        return (this.dataSource ?? new MessageUtils()).getAudioMessageOptions(loggedInUser, messageObject, theme, group);
    }
    getFileMessageOptions(loggedInUser, messageObject, theme, group) {
        return (this.dataSource ?? new MessageUtils()).getFileMessageOptions(loggedInUser, messageObject, theme, group);
    }
    getTextMessageTemplate() {
        return (this.dataSource ?? new MessageUtils()).getTextMessageTemplate();
    }
    getImageMessageTemplate() {
        return (this.dataSource ?? new MessageUtils()).getImageMessageTemplate();
    }
    getVideoMessageTemplate() {
        return (this.dataSource ?? new MessageUtils()).getVideoMessageTemplate();
    }
    getAudioMessageTemplate() {
        return (this.dataSource ?? new MessageUtils()).getAudioMessageTemplate();
    }
    getFileMessageTemplate() {
        return (this.dataSource ?? new MessageUtils()).getFileMessageTemplate();
    }
    getFormMessageTemplate() {
        return (this.dataSource ?? new MessageUtils()).getFormMessageTemplate();
    }
    getCardMessageTemplate() {
        return (this.dataSource ?? new MessageUtils()).getCardMessageTemplate();
    }
    getGroupActionTemplate() {
        return (this.dataSource ?? new MessageUtils()).getGroupActionTemplate();
    }
    getSchedulerMessageTemplate() {
        return (this.dataSource ?? new MessageUtils()).getSchedulerMessageTemplate();
    }
    getAllMessageTemplates() {
        return (this.dataSource ?? new MessageUtils()).getAllMessageTemplates();
    }
    getMessageTemplate(messageType, messageCategory) {
        return (this.dataSource ?? new MessageUtils()).getMessageTemplate(messageType, messageCategory);
    }
    getMessageOptions(loggedInUser, messageObject, theme, group) {
        return (this.dataSource ?? new MessageUtils()).getMessageOptions(loggedInUser, messageObject, theme, group);
    }
    getCommonOptions(loggedInUser, messageObject, theme, group) {
        return (this.dataSource ?? new MessageUtils()).getCommonOptions(loggedInUser, messageObject, theme, group);
    }
    getDeleteOption(theme) {
        return (this.dataSource ?? new MessageUtils()).getDeleteOption(theme);
    }
    getReplyInThreadOption(theme) {
        return (this.dataSource ?? new MessageUtils()).getReplyInThreadOption(theme);
    }
    getEditOption(theme) {
        return (this.dataSource ?? new MessageUtils()).getEditOption(theme);
    }
    getAttachmentOptions(theme = new CometChatTheme({}), user, group, id) {
        return (this.dataSource ?? new MessageUtils()).getAttachmentOptions(theme, user, group, id);
    }
    getAllMessageTypes() {
        return (this.dataSource ?? new MessageUtils()).getAllMessageTypes();
    }
    getAllMessageCategories() {
        return (this.dataSource ?? new MessageUtils()).getAllMessageCategories();
    }
    getAuxiliaryOptions(id, user, group) {
        return (this.dataSource ?? new MessageUtils()).getAuxiliaryOptions(id, user, group);
    }
    getId() {
        return (this.dataSource ?? new MessageUtils()).getId();
    }
    getLastConversationMessage(conversation, loggedInUser) {
        return (this.dataSource ?? new MessageUtils()).getLastConversationMessage(conversation, loggedInUser);
    }
    getAIOptions(theme, id, aiOptionsStyles) {
        return (this.dataSource ?? new MessageUtils()).getAIOptions(theme, id, aiOptionsStyles);
    }
}
//# sourceMappingURL=data:application/json;base64,