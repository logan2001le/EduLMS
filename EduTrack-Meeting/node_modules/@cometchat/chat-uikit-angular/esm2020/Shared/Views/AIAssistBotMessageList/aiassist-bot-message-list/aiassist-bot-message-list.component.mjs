import { CometChat } from "@cometchat/chat-sdk-javascript";
import { Component, ChangeDetectionStrategy, Input, ViewChild, } from "@angular/core";
import { AvatarStyle, } from "@cometchat/uikit-elements";
import { localize, MessageListAlignment, MessageBubbleAlignment, CometChatUIKitConstants, CometChatUIEvents, fontHelper, DatePatterns, Receipts, } from "@cometchat/uikit-resources";
import { CometChatUIKitUtility, } from "@cometchat/uikit-shared";
import * as i0 from "@angular/core";
import * as i1 from "./../../../../CometChatTheme.service";
import * as i2 from "../../../../CometChatList/cometchat-list.component";
import * as i3 from "../../../../CometChatMessageBubble/cometchat-message-bubble/cometchat-message-bubble.component";
import * as i4 from "@angular/common";
export class AIAssistBotMessageListComponent {
    constructor(ref, themeService) {
        this.ref = ref;
        this.themeService = themeService;
        this.messagesList = [];
        this.botMessagesList = [];
        this.hideSearch = true;
        this.subtitleText = localize("COMETCHAT_ASK_BOT_SUBTITLE");
        this.sendIconUrl = "assets/Send.svg";
        this.waitIcon = "assets/wait.svg";
        this.errorIcon = "assets/warning-small.svg";
        this.botFirstMessageText = localize("COMETCHAT_BOT_FIRST_MESSAGE");
        this.closeButtonIconURL = "assets/close2x.svg";
        this.sendButtonIconURL = "assets/Send.svg";
        this.avatarStyle = {
            borderRadius: "16px",
            width: "28px",
            height: "28px",
        };
        this.aiBotChatHeaderStyle = {
            backGround: "rgba(20, 20, 20, 0.15)",
        };
        this.aiBotChatContainerStyle = {
            backGround: "rgba(255,255,255)",
        };
        this.datePattern = DatePatterns.time;
        this.bubbleDateStyle = {};
        this.messageTemplate = [];
        this.alignment = MessageListAlignment.standard;
        this.receipts = Receipts.wait;
        this.currentMessageObject = null;
        this.typesMap = {};
        this.messageTypesMap = {};
        this.messageInputStyle = {
            width: "98%",
            dividerColor: "transparent",
            background: "transparent",
            border: "2px solid red transparent",
        };
        this.sendButtonStyle = {
            height: "24px",
            width: "24px",
            border: "none",
            borderRadius: "0",
            background: "transparent",
            buttonIconTint: this.themeService.theme.palette.getPrimary(),
        };
        this.messageInputChanged = (event) => {
            const text = event?.detail?.value?.trim();
            this.inputValue = text;
        };
        this.closeButtonStyle = {
            height: "24px",
            width: "24px",
            border: "none",
            borderRadius: "0",
            background: "transparent",
            buttonIconTint: this.themeService.theme.palette.getPrimary(),
        };
        this.labelStyle = {
            textFont: "400 11px Inter",
            textColor: "grey",
        };
    }
    ngOnInit() {
        this.setAvatarStyle();
        this.setAiBotChatHeader();
        this.setAiBotChatContainerStyle();
        let receiverId = this.user
            ? this.user?.getUid()
            : this.group?.getGuid();
        let receiverType = this.user
            ? CometChatUIKitConstants.MessageReceiverType.user
            : CometChatUIKitConstants.MessageReceiverType.group;
        let firstMessage = new CometChat.TextMessage(this.currentAskAIBot?.id, this.botFirstMessageText, receiverType);
        firstMessage.setSentAt(CometChatUIKitUtility.getUnixTimestamp());
        this.botMessagesList.push(firstMessage);
        CometChat.getLoggedinUser()
            .then((user) => {
            this.loggedInUser = user;
        })
            .catch((error) => {
            if (this.onError) {
                this.onError(error);
            }
        });
        this.setMessagesStyle();
        this.subscribeToEvents();
    }
    setAvatarStyle() {
        let defaultStyle = new AvatarStyle({
            borderRadius: "24px",
            width: "28px",
            height: "28px",
            border: `1px solid ${this.themeService.theme.palette.getAccent200()}`,
            backgroundColor: this.themeService.theme.palette.getAccent700(),
            nameTextColor: this.themeService.theme.palette.getAccent900(),
            backgroundSize: "cover",
            nameTextFont: fontHelper(this.themeService.theme.typography.subtitle1),
            outerViewBorderSpacing: "",
        });
        this.avatarStyle = { ...defaultStyle, ...this.avatarStyle };
    }
    setAiBotChatHeader() {
        let defaultStyle = {
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            padding: "10px",
            height: "40px",
            background: this.themeService.theme?.palette.getAccent200(),
        };
        this.aiBotChatHeaderStyle = {
            ...defaultStyle,
            ...this.aiBotChatHeaderStyle,
        };
    }
    setAiBotChatContainerStyle() {
        let defaultStyle = {
            background: this.themeService.theme.palette.getBackground(),
        };
        this.aiBotChatContainerStyle = {
            ...defaultStyle,
            ...this.aiBotChatContainerStyle,
        };
    }
    ngOnDestroy() {
        this.unSubscribeToEvent();
    }
    subscribeToEvents() {
        this.ccChatChanged = CometChatUIEvents.ccActiveChatChanged.subscribe(() => {
            CometChatUIEvents.ccShowPanel.next({
                child: { showBotView: false },
            });
        });
    }
    unSubscribeToEvent() {
        this.ccChatChanged?.unsubscribe();
    }
    onError(error) {
        throw new Error("Method not implemented.");
    }
    generateRandomString(length) {
        const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        let randomString = "";
        for (let i = 0; i < length; i++) {
            const randomIndex = Math.floor(Math.random() * characters.length);
            randomString += characters.charAt(randomIndex);
        }
        return randomString;
    }
    handleClick() {
        this.receipts = Receipts.wait;
        let receiverId = this.user
            ? this.user?.getUid()
            : this.group?.getGuid();
        let receiverType = this.user
            ? CometChatUIKitConstants.MessageReceiverType.user
            : CometChatUIKitConstants.MessageReceiverType.group;
        let botUid = this.currentAskAIBot?.id;
        let question = this.inputValue;
        this.inputRef?.nativeElement?.emptyInputField();
        let query = new CometChat.TextMessage(this.loggedInUser.getUid(), question, receiverType);
        // Generate a random string for the message ID
        let randomString = this.generateRandomString(10); // Specify the desired length
        // Convert the random string to a number (may not be the best practice)
        let randomStringAsNumber = parseInt(randomString, 36); // 36 is the radix for alphanumeric characters
        query.setId(randomStringAsNumber);
        query.setSentAt(CometChatUIKitUtility.getUnixTimestamp());
        this.currentMessageObject = query;
        if (question.trim().length > 0) {
            this.botMessagesList.push(query);
            CometChat.askBot(receiverId, receiverType, botUid, question)
                .then((response) => {
                return response;
            })
                .then((messageText) => {
                this.inputValue = "";
                this.receipts = null;
                let answer = new CometChat.TextMessage(botUid, messageText, receiverType);
                answer.setSentAt(CometChatUIKitUtility.getUnixTimestamp());
                this.botMessagesList.push(answer);
                this.ref.detectChanges();
            })
                .catch((error) => {
                this.receipts = Receipts.error;
                console.error("error", error);
            });
        }
    }
    setMessageBubbleStyle(msg) {
        let style;
        if (msg.getReceiverId() !== this.loggedInUser?.getUid()) {
            style = {
                background: this.themeService.theme.palette.getAccent100(),
                borderRadius: "12px",
            };
        }
        else {
            style = {
                background: this.themeService.theme.palette.getPrimary(),
                borderRadius: "12px",
            };
        }
        return style;
    }
    getBubbleAlignment(message) {
        return message.getReceiverId() !== this.loggedInUser?.getUid()
            ? MessageBubbleAlignment.left
            : MessageBubbleAlignment.right;
    }
    onCloseDetails() {
        CometChatUIEvents.ccShowPanel.next({
            child: { showBotView: false },
        });
    }
    setMessagesStyle() {
        this.bubbleDateStyle = {
            textColor: this.themeService.theme.palette.getAccent600(),
            textFont: fontHelper(this.themeService.theme.typography.caption2),
        };
    }
    getBotTitleStyle() {
        return {
            font: fontHelper(this.themeService.theme.typography.subtitle1),
            color: this.themeService.theme.palette.getAccent(),
        };
    }
    getBotSubtitleStyle() {
        return {
            font: fontHelper(this.themeService.theme.typography.caption2),
            color: this.themeService.theme.palette.getAccent500(),
        };
    }
}
AIAssistBotMessageListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: AIAssistBotMessageListComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.CometChatThemeService }], target: i0.ɵɵFactoryTarget.Component });
AIAssistBotMessageListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: AIAssistBotMessageListComponent, selector: "aiassist-bot-message-list", inputs: { hideSearch: "hideSearch", footerView: "footerView", user: "user", group: "group", currentAskAIBot: "currentAskAIBot", subtitleText: "subtitleText", sendIconUrl: "sendIconUrl", waitIcon: "waitIcon", errorIcon: "errorIcon", botFirstMessageText: "botFirstMessageText", closeButtonIconURL: "closeButtonIconURL", sendButtonIconURL: "sendButtonIconURL", avatarStyle: "avatarStyle", aiBotChatHeaderStyle: "aiBotChatHeaderStyle", aiBotChatContainerStyle: "aiBotChatContainerStyle", datePattern: "datePattern", alignment: "alignment" }, viewQueries: [{ propertyName: "inputRef", first: true, predicate: ["inputRef"], descendants: true }], ngImport: i0, template: "<div class=\"cc-ai-assist-message-list__wrapper\" [ngStyle]=\"aiBotChatContainerStyle\">\n  <div class=\"cc-ai-assist-message-list__header-view\" [ngStyle]=\"aiBotChatHeaderStyle\">\n    <div class=\"cc-ai-assist-message-list__header-avatar\">\n      <cometchat-avatar [image]=\"currentAskAIBot?.iconURL\" [avatarStyle]=\"avatarStyle\">\n      </cometchat-avatar>\n      <div class=\"cc-ai-assist-message-list__header-bot-name\"> \n       \n\n          <div [ngStyle]=\"getBotTitleStyle()\">\n            {{currentAskAIBot?.title}}\n          </div>\n          <div [ngStyle]=\"getBotSubtitleStyle()\">\n            {{subtitleText}}\n          </div>\n      </div>\n\n    </div>\n\n    <cometchat-button [iconURL]=\"closeButtonIconURL\" class=\"cc-details__close-button\" [buttonStyle]=\"closeButtonStyle\"\n      (cc-button-clicked)=\"onCloseDetails()\"></cometchat-button>\n  </div>\n  <div class=\"cc-ai-assist-message-list\">\n    <cometchat-list [listItemView]=\"listItem\" [list]=\"botMessagesList\" [hideSearch]=\"hideSearch\">\n    </cometchat-list>\n    <ng-template #listItem let-message>\n      <cometchat-message-bubble [bottomView]=\"null\" [footerView]=\"bubbleFooter\" [threadView]=\"null\"\n        [contentView]=\"contentView\" [messageBubbleStyle]=\"setMessageBubbleStyle(message)\"\n        [alignment]=\"getBubbleAlignment(message)\" [leadingView]=\"leadingView\" [headerView]=\"bubbleHeader\">\n        <ng-template #contentView>\n          <div class=\"cc-ai-assist-message\"\n            >\n            {{message.data.text}}\n          </div>\n        </ng-template>\n        <ng-template #leadingView>\n\n        </ng-template>\n        <ng-template #bubbleHeader>\n\n        </ng-template>\n        <ng-template #bubbleFooter>\n          <div>\n\n            <cometchat-date [pattern]=\"datePattern\" [timestamp]=\"message?.getSentAt()\"\n              [dateStyle]=\"bubbleDateStyle\"></cometchat-date>\n            <cometchat-receipt\n              *ngIf=\"message?.receiverId !==currentAskAIBot.id && message?.getId()===currentMessageObject?.getId()\"\n              [receipt]=\"receipts\" [waitIcon]=\"waitIcon\" [errorIcon]=\"errorIcon\"></cometchat-receipt>\n          </div>\n        </ng-template>\n      </cometchat-message-bubble>\n      <hr>\n    </ng-template>\n  </div>\n\n  <div class=\"cc-ai-assist__input-wrapper\">\n    <div class=\"cc-ai-assist__input\">\n      <cometchat-message-input [messageInputStyle]=\"messageInputStyle\" #inputRef\n        (cc-message-input-changed)=\"messageInputChanged($event)\"\n        (cc-message-input-entered)=\"handleClick()\"></cometchat-message-input>\n      <cometchat-button [iconURL]=\"sendIconUrl\" (cc-button-clicked)=\"handleClick()\"\n        [buttonStyle]=\"sendButtonStyle\"></cometchat-button>\n    </div>\n  </div>\n</div>", styles: [".cc-ai-assist-message-list__wrapper{position:absolute;right:0;top:0;background-color:#fff;width:50%;height:100%}.cc-ai-assist-message-list__header-view{display:flex;justify-content:space-between;align-items:center;height:5%;padding:5px;background-color:#14141426}.cc-ai-assist-message-list__header-avatar{display:flex;align-items:center;gap:8px}.cc-ai-assist-message-list__header-bot-name{display:flex;flex-direction:column}.cc-ai-assist-message-list__header-bot-name>small{color:#14141494;font-family:inter}.cc-ai-assist-message-list{height:85%;border-bottom:1px solid RGB(229,231,233)}.cc-ai-assist-message{padding:8px 12px}.cc-ai-assist__input-wrapper{width:100%;height:7%;position:absolute;bottom:0;padding-left:7px}.cc-ai-assist__input{display:flex;width:98%;align-items:center}cometchat-message-input{width:95%}\n"], components: [{ type: i2.CometchatListComponent, selector: "cometchat-list", inputs: ["listItemView", "onScrolledToBottom", "onScrolledToTop", "list", "onSearch", "getSectionHeader", "searchText", "searchIconURL", "listStyle", "searchPlaceholderText", "hideSearch", "hideError", "title", "titleAlignment", "errorStateView", "loadingStateView", "emptyStateView", "state", "errorStateText", "emptyStateText", "loadingIconURL", "showSectionHeader", "sectionHeaderField", "DateSeparatorPattern", "dateSeparatorStyle"] }, { type: i3.CometChatMessageBubbleComponent, selector: "cometchat-message-bubble", inputs: ["messageBubbleStyle", "alignment", "options", "id", "leadingView", "headerView", "replyView", "contentView", "threadView", "footerView", "bottomView", "moreIconURL", "topMenuSize"] }], directives: [{ type: i4.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: AIAssistBotMessageListComponent, decorators: [{
            type: Component,
            args: [{ selector: "aiassist-bot-message-list", changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"cc-ai-assist-message-list__wrapper\" [ngStyle]=\"aiBotChatContainerStyle\">\n  <div class=\"cc-ai-assist-message-list__header-view\" [ngStyle]=\"aiBotChatHeaderStyle\">\n    <div class=\"cc-ai-assist-message-list__header-avatar\">\n      <cometchat-avatar [image]=\"currentAskAIBot?.iconURL\" [avatarStyle]=\"avatarStyle\">\n      </cometchat-avatar>\n      <div class=\"cc-ai-assist-message-list__header-bot-name\"> \n       \n\n          <div [ngStyle]=\"getBotTitleStyle()\">\n            {{currentAskAIBot?.title}}\n          </div>\n          <div [ngStyle]=\"getBotSubtitleStyle()\">\n            {{subtitleText}}\n          </div>\n      </div>\n\n    </div>\n\n    <cometchat-button [iconURL]=\"closeButtonIconURL\" class=\"cc-details__close-button\" [buttonStyle]=\"closeButtonStyle\"\n      (cc-button-clicked)=\"onCloseDetails()\"></cometchat-button>\n  </div>\n  <div class=\"cc-ai-assist-message-list\">\n    <cometchat-list [listItemView]=\"listItem\" [list]=\"botMessagesList\" [hideSearch]=\"hideSearch\">\n    </cometchat-list>\n    <ng-template #listItem let-message>\n      <cometchat-message-bubble [bottomView]=\"null\" [footerView]=\"bubbleFooter\" [threadView]=\"null\"\n        [contentView]=\"contentView\" [messageBubbleStyle]=\"setMessageBubbleStyle(message)\"\n        [alignment]=\"getBubbleAlignment(message)\" [leadingView]=\"leadingView\" [headerView]=\"bubbleHeader\">\n        <ng-template #contentView>\n          <div class=\"cc-ai-assist-message\"\n            >\n            {{message.data.text}}\n          </div>\n        </ng-template>\n        <ng-template #leadingView>\n\n        </ng-template>\n        <ng-template #bubbleHeader>\n\n        </ng-template>\n        <ng-template #bubbleFooter>\n          <div>\n\n            <cometchat-date [pattern]=\"datePattern\" [timestamp]=\"message?.getSentAt()\"\n              [dateStyle]=\"bubbleDateStyle\"></cometchat-date>\n            <cometchat-receipt\n              *ngIf=\"message?.receiverId !==currentAskAIBot.id && message?.getId()===currentMessageObject?.getId()\"\n              [receipt]=\"receipts\" [waitIcon]=\"waitIcon\" [errorIcon]=\"errorIcon\"></cometchat-receipt>\n          </div>\n        </ng-template>\n      </cometchat-message-bubble>\n      <hr>\n    </ng-template>\n  </div>\n\n  <div class=\"cc-ai-assist__input-wrapper\">\n    <div class=\"cc-ai-assist__input\">\n      <cometchat-message-input [messageInputStyle]=\"messageInputStyle\" #inputRef\n        (cc-message-input-changed)=\"messageInputChanged($event)\"\n        (cc-message-input-entered)=\"handleClick()\"></cometchat-message-input>\n      <cometchat-button [iconURL]=\"sendIconUrl\" (cc-button-clicked)=\"handleClick()\"\n        [buttonStyle]=\"sendButtonStyle\"></cometchat-button>\n    </div>\n  </div>\n</div>", styles: [".cc-ai-assist-message-list__wrapper{position:absolute;right:0;top:0;background-color:#fff;width:50%;height:100%}.cc-ai-assist-message-list__header-view{display:flex;justify-content:space-between;align-items:center;height:5%;padding:5px;background-color:#14141426}.cc-ai-assist-message-list__header-avatar{display:flex;align-items:center;gap:8px}.cc-ai-assist-message-list__header-bot-name{display:flex;flex-direction:column}.cc-ai-assist-message-list__header-bot-name>small{color:#14141494;font-family:inter}.cc-ai-assist-message-list{height:85%;border-bottom:1px solid RGB(229,231,233)}.cc-ai-assist-message{padding:8px 12px}.cc-ai-assist__input-wrapper{width:100%;height:7%;position:absolute;bottom:0;padding-left:7px}.cc-ai-assist__input{display:flex;width:98%;align-items:center}cometchat-message-input{width:95%}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.CometChatThemeService }]; }, propDecorators: { hideSearch: [{
                type: Input
            }], footerView: [{
                type: Input
            }], user: [{
                type: Input
            }], group: [{
                type: Input
            }], currentAskAIBot: [{
                type: Input
            }], subtitleText: [{
                type: Input
            }], sendIconUrl: [{
                type: Input
            }], waitIcon: [{
                type: Input
            }], errorIcon: [{
                type: Input
            }], botFirstMessageText: [{
                type: Input
            }], closeButtonIconURL: [{
                type: Input
            }], sendButtonIconURL: [{
                type: Input
            }], avatarStyle: [{
                type: Input
            }], aiBotChatHeaderStyle: [{
                type: Input
            }], aiBotChatContainerStyle: [{
                type: Input
            }], datePattern: [{
                type: Input
            }], inputRef: [{
                type: ViewChild,
                args: ["inputRef", { static: false }]
            }], alignment: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,