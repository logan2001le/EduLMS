import { LitElement } from 'lit';
import { CreateGroupStyle } from './CreateGroupStyle';
export declare class CometChatCreateGroup extends LitElement {
    title: string;
    createGroupButtonText: string;
    nameInputPlaceholderText: string;
    passwordInputPlaceholderText: string;
    closeButtonIconURL: string;
    hideCloseButton: boolean;
    errorStateText: string;
    createGroupStyle: CreateGroupStyle;
    errorCallback: any;
    closeCallback: any;
    createClick: ((group: CometChat.Group) => void) | null;
    hasError: boolean;
    objectKeys: any;
    groupTypes: any;
    activeTab: string;
    passwordInput: boolean;
    groupName: string;
    groupPassword: string;
    type: string;
    static styles: import("lit").CSSResult[];
    buttonGroup: {
        buttonText: string;
        id: string;
    }[];
    buttonGroupStyle: {};
    render(): import("lit-html").TemplateResult<1>;
    /**
   * @param  {string} type
   */
    setActiveTab(event: any): void;
    /**
    * If the Group Data is successfully validated , below function creates the group
    * @param
    */
    createGroup(): void;
    closeCreateGroupView(): void;
    /**
     * Resets all the Group creation form data to initial values
     * @param
     */
    resetGroupData(): void;
    /**
   * Props dependent styles of CometChatCreateGroup
   */
    closeIconStyle: () => {
        buttonIconTint: string | undefined;
        height: string;
        width: string;
        border: string;
        borderRadius: string;
        background: string;
    };
    createButtonStyle: () => {
        buttonTextFont: string | undefined;
        buttonTextColor: string | undefined;
        background: string | undefined;
        borderRadius: string | undefined;
        border: string | undefined;
        width: string;
        height: string;
        display: string;
        justifyContent: string;
    };
    passwordInputStyle: any;
    nameInputStyle: any;
    titleStyle: () => {
        textColor: string;
        textFont: string;
    };
    wrapperStyle: () => {
        border: string | undefined;
        borderRadius: string | undefined;
        height: string | undefined;
        width: string | undefined;
        background: string | undefined;
        boxShadow: string | undefined;
    };
    errorTextStyle: () => {
        textFont: string;
        textColor: string;
        background: string;
    };
}
declare global {
    interface TagNameMap {
        'cometchat-create-group': CometChatCreateGroup;
    }
    namespace JSX {
        interface IntrinsicElements {
            "cometchat-create-group": any;
        }
    }
}
//# sourceMappingURL=cometchat-create-group.d.ts.map