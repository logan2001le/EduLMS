import { LitElement, PropertyValueMap } from 'lit';
import { CallscreenStyle } from './CallscreenStyle';
export declare class CometChatCallscreenWrapper extends LitElement {
    callscreenStyle: CallscreenStyle;
    resizeIconHoverText: string;
    minimizeIconURL: string;
    maximizeIconURL: string;
    startX: number;
    startY: number;
    startWidth: number;
    startHeight: number;
    minHeight: number;
    minWidth: number;
    callScreenFrame: any;
    callScreenBackgroundEl: any;
    callScreenInnerBackgroundEl: any;
    callScreenEl: any;
    constructor();
    static styles: import("lit").CSSResult[];
    state: any;
    showResizerIcon: boolean;
    protected firstUpdated(_changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void;
    protected updated(_changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void;
    disconnectedCallback(): void;
    enableDragging: (e: any) => false | undefined;
    checkIfCallScreenIsMaximized: () => boolean;
    checkIfCallScreenIsMinimized: () => boolean;
    startDragging: (e: any) => void;
    disableDragging: (e: any) => void;
    initResize: (e: any) => false | undefined;
    startResize: (e: any) => void;
    stopResize: () => void;
    toggleCallScreenBackground: (flag: boolean) => void;
    toggleCallScreenInnerBackground: (flag: boolean) => void;
    setDimensionOfCallScreenInnerBackground: (props: any) => void;
    setPositionOfCallScreenInnerBackground: (props: any) => void;
    minimize: () => false | undefined;
    maximize: () => false | undefined;
    setSizingAndPostionOfCallScreen: (props: any) => void;
    connectedCallback(): void;
    toggle: (e: any) => void;
    render(): import("lit-html").TemplateResult<1>;
    callScreenWrapperStyle: () => {
        backgroundColor: string;
    };
    callScreenBackgroundStyle: () => {
        display: string;
        width: string;
        height: string;
        position: string;
        top: string;
        left: string;
        bottom: string;
        right: string;
        zIndex: string;
    };
    callScreenContainerStyle: () => {
        width: any;
        height: any;
        position: string;
        overflow: string;
        zIndex: string;
        top: string;
        left: string;
        border: string | undefined;
        borderRadius: string | undefined;
    };
    callScreenHeaderStyle: () => {
        backgroundColor: string | undefined;
        cursor: string;
    };
    headerStyle: () => {
        width: string;
        padding: string;
    };
    callScreenResizerStyle: () => {
        display: string;
        cursor?: undefined;
        clipPath?: undefined;
        background?: undefined;
        width: string;
        height: string;
        position: string;
        right: string;
        bottom: string;
        zIndex: string;
    } | {
        cursor: string;
        clipPath: string;
        background: string;
        display?: undefined;
        width: string;
        height: string;
        position: string;
        right: string;
        bottom: string;
        zIndex: string;
    };
    iconStyle: () => {
        width: string;
        height: string;
        buttonIconTint: string | undefined;
        border: string;
        borderRadius: string;
        background: string;
    };
}
declare global {
    namespace JSX {
        interface IntrinsicElements {
            "cometchat-callscreen-wrapper": any;
        }
    }
    interface HTMLElementTagNameMap {
        'cometchat-callscreen-wrapper': any;
    }
}
//# sourceMappingURL=cometchat-callscreen-wrapper.d.ts.map