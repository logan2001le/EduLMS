import { LitElement, PropertyValueMap, nothing } from 'lit';
import { SchedulerBubbleStyle } from './SchedulerBubbleStyle.js';
import { SchedulerMessage } from '@cometchat/uikit-resources';
export declare class CometChatSchedulerBubble extends LitElement {
    title: string;
    avatarUrl: string;
    goalCompletionText: string;
    avatarStyle: any;
    onScheduleClick?: (timestamp: string, message: SchedulerMessage) => void;
    timeFormat: string;
    loggedInUser: CometChat.User;
    emptySlotIconURL: string;
    backButtonIconURL: string;
    loadingIconURL: string;
    clockIconURL: string;
    calendarIconURL: string;
    timezoneIconURL: string;
    schedulerMessage: SchedulerMessage;
    schedulerBubbleStyle: SchedulerBubbleStyle;
    currentPage: number;
    user: any;
    blockedTimes: any;
    availableMeetingDays: any;
    availabilityObject: any;
    dateAvailablity: any;
    compDimensions: any;
    selectedSlotState: any;
    timeSlotContainerHeight: any;
    SelectedSlot: any;
    isLoading: boolean;
    previousPage?: number;
    blockedCurrentTime: any;
    static styles: import("lit").CSSResult;
    availableDaySlots: any;
    defaultButtonsStyle: {
        padding: string;
        boxSizing: string;
        border: string;
        borderRadius: string;
        height: string;
        width: string;
        display: string;
        justifyContent: string;
        alignItems: string;
    };
    dateFormats: any;
    oldIcsFileData: any;
    interactiveData: any;
    allowSenderInteraction: boolean;
    currentDate: string;
    availableDefaultSlots: string[];
    currentDateWithYear: string;
    slotAlreadyBooked: boolean;
    showError: boolean;
    timezoneText: string;
    getHeaderView(): import("lit-html").TemplateResult<1> | typeof nothing;
    getButtonView(): import("lit-html").TemplateResult<1> | typeof nothing;
    getSlotButtonText(): any;
    getInitialHeaderView(): import("lit-html").TemplateResult<1>;
    getDateTimeHeaderView(): import("lit-html").TemplateResult<1>;
    getConfirmPageHeaderView(): import("lit-html").TemplateResult<1>;
    getContentView(): import("lit-html").TemplateResult<1>;
    schedulingInProgress: boolean;
    icsFileData: any;
    currentComp: any;
    startDate: any;
    endDate: any;
    buffer: any;
    duration: any;
    availableSlots: any;
    selectedDate: any;
    slotsArray: any;
    timezoneCode: string;
    minDate?: string;
    maxDate?: string;
    checkHasInteractionCompleted: () => boolean;
    connectedCallback(): void;
    getCurrentTime(): string;
    getNextDate(current: string): string;
    timeToMinutes(timeStr: string): number;
    isSlotAvailable(availableSlots: string[], selectedSlot: string): boolean;
    getQuickSlotDate(): string | undefined;
    isTimeInArray(timeStr: string, timeArray: string[]): boolean;
    processEvents(events: any): any;
    fetchIcsData(checkAlreadySchedule?: (bool: boolean) => void): void;
    getCurrentDateInMilliseconds(date?: string): number;
    getFirstAvailableDay(): void;
    getTodaysDateFormatted(): string;
    getCurrentDateSlots(slots: any): void;
    padTo2Digits(num: number): string;
    formatDate(): string;
    getTodaysDateInDDMMYY(): string;
    protected firstUpdated(_changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void;
    getInitialContentView(): import("lit-html").TemplateResult<1>;
    formatTime(timeString: string): string;
    getAvailableQuickSlot(slot: any, showReverse?: boolean): string;
    getDateContentView(): import("lit-html").TemplateResult<1>;
    convertTimestampToDate(timestamp: number): string;
    getTimeContentView(): import("lit-html").TemplateResult<1>;
    getConfirmPageView(): import("lit-html").TemplateResult<1>;
    scheduleMeeting(): void;
    getGoalCompletedView(): import("lit-html").TemplateResult<1>;
    onDateSelected: (e: any) => void;
    onSlotSelected: (e: any) => void;
    render(): import("lit-html").TemplateResult<1> | undefined;
    goToNextPage(page?: number): void;
    goToPreviousPage(page?: number): void;
    onSlotClick(slot: any): void;
    showMoreSlots: (number: number) => void;
    makePutRequest(url: string, method: string, data: any, headers: any): Promise<any>;
    getAvatarStyle(): any;
    getTitleStyle(): {
        textFont: string;
        textColor: string;
    };
    getSubtitleStyle(): {
        font: string;
        color: string;
    };
    slotBookedStyle(): {
        font: string;
        color: string;
    };
    getSelectSlotStyles(): {
        buttonTextFont: string;
        buttonTextColor: string;
        border: string;
        borderRadius: string;
        background: string;
        width: string;
        display: string;
        alignItems: string;
        justifyContent: string;
        padding: string;
        minHeight: string;
    } | {
        buttonTextFont: string;
        buttonTextColor: string;
        border: string;
        borderRadius: string;
        background: string;
        width: string;
        display: string;
        alignItems: string;
        justifyContent: string;
        padding: string;
        minHeight?: undefined;
    };
    getBackButtonStyle(): {
        height: string;
        width: string;
        iconHeight: string;
        iconWidth: string;
        buttonIconTint: string;
        border: string;
        background: string;
    };
    getTimeZoneStyle(): {
        font: string;
        color: string;
    };
    getButtonsStyle(): any;
    emptySlotStyle(): {
        textFont: string;
        textColor: string;
    };
    emptySlotIconStyle(): {
        iconTint: string;
        height: string;
        width: string;
    };
    getDividerStyle(): {
        height: string;
        width: string;
        background: string;
    };
    getquickViewStyle(): {
        titleFont: string;
        titleColor: string;
        subtitleFont: string;
        subtitleColor: string;
        closeIconTint: string;
        leadingBarTint: string;
        leadingBarWidth: string;
        height: string;
        width: string;
        border?: string | undefined;
        borderRadius: string;
        background: string;
    };
    getdateSelectorStyle(): {
        dateTextFont: string;
        dateTextColor: string;
        dayTextFont: string;
        dayTextColor: string;
        monthYearTextFont: string;
        monthYearTextColor: string;
        disabledDateTextFont: string;
        disabledDateTextBackground: string;
        defaultDateTextBackground: string;
        disabledDateTextColor: string;
        titleTextFont: string;
        titleTextColor: string;
        timezoneTextFont: string;
        timezoneTextColor: string;
        arrowButtonTextFont: string;
        arrowButtonTextColor: string;
        height: string;
        width: string;
        border: string;
        borderRadius: string;
        background: string;
    };
    getContentWrapperStyle(): {
        padding: string;
    };
    getHeaderStyle(): {
        padding: string;
    };
    getWrapperStyle(): {
        background: string;
        height: string;
        width: string;
        border: string;
        borderRadius: string;
    };
    getGoalCompletionTextStyle(): {
        font: string;
        color: string;
        display: string;
        paddingLeft: string;
        paddingTop: string;
    };
    getSummeryStyle(): {
        font: string;
        color: string;
        textAlign: string;
    };
    getListItemStyle(): {
        activeBackground: string;
        hoverBackground: string;
        separatorColor: string;
        titleFont: string;
        titleColor: string;
        padding?: string | undefined;
        height: string;
        width: string;
        border: string;
        borderRadius: string;
        background: string;
    };
}
declare global {
    namespace JSX {
        interface IntrinsicElements {
            "cometchat-scheduler-bubble": any;
        }
    }
    interface TagNameMap {
        'cometchat-scheduler-bubble': any;
    }
}
//# sourceMappingURL=cometchat-scheduler-bubble.d.ts.map