import { LitElement, PropertyValueMap } from 'lit';
import { PollsBubbleStyle } from './PollsBubbleStyle';
export declare class PollsBubble extends LitElement {
    options: any[];
    pollQuestion: string;
    pollId: string | number;
    loggedInUser: CometChat.User;
    senderUid: string;
    metadata: any;
    pollStyle: PollsBubbleStyle;
    pollOptions: any;
    totalVotes: number;
    pollExtensionData: any;
    selectedOption: any;
    static styles: import("lit").CSSResult[];
    /**
     * Displays the poll component , only if it is enabled
     */
    /**
     * Sets Poll Data
     * @param
     */
    setPollExtensionData(): void;
    protected updated(_changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void;
    render(): import("lit-html").TemplateResult<1>;
    messageContainer: () => {
        background: string;
        height: string | undefined;
        width: string | undefined;
    };
    setvotePercentageStyle: () => {
        font: string | undefined;
        color: string | undefined;
    };
    setPollOptionStyle: () => {
        font: string | undefined;
        color: string | undefined;
    };
    pollResultStyle: () => {
        textFont: string | undefined;
        textColor: string | undefined;
    };
    pollOptionStyle: (option: any) => {
        background: string | undefined;
        border: string | undefined;
        borderRadius: string;
    };
    checkIconStyle: (option: any) => {
        width: string;
        height: string;
        iconTint: string | undefined;
    } | {
        width?: undefined;
        height?: undefined;
        iconTint?: undefined;
    };
    /**
     * sends the  answer selected by the user for the  the poll question
     * @param Any selectedOption
     */
    answerPollQuestion(selectedOption: any): void;
    pollStyles: () => {
        width: string | undefined;
        height: string | undefined;
        border: string | undefined;
        borderRadius: string | undefined;
        background: string | undefined;
    };
    pollTitleStyle: () => {
        textFont: string | undefined;
        textColor: string | undefined;
    };
}
declare global {
    namespace JSX {
        interface IntrinsicElements {
            "polls-bubble": any;
        }
    }
    interface TagNameMap {
        'polls-bubble': any;
    }
}
//# sourceMappingURL=polls-bubble.d.ts.map