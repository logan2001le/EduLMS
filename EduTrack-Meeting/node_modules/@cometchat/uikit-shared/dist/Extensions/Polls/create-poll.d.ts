import { LitElement, PropertyValueMap } from 'lit';
import { CreatePollStyle } from './CreatePollStyle';
export declare class CreatePoll extends LitElement {
    title: string;
    user: CometChat.User;
    group: CometChat.Group;
    ccCloseClicked: (() => void) | null;
    defaultAnswers: number;
    questionPlaceholderText: string;
    answerPlaceholderText: string;
    answerHelpText: string;
    addAnswerText: string;
    deleteIconURL: string;
    closeIconURL: string;
    addAnswerIconURL: string;
    createPollButtonText: string;
    createPollStyle: CreatePollStyle;
    static styles: import("lit").CSSResult[];
    /**
  * Properties for internal use
  */
    errorText: string;
    inputQuestion: string;
    inputOptionItems: {
        key: string;
        value: string;
    }[];
    isError: boolean;
    type: string;
    closePollView(): void;
    getOptionCount(count: number): string;
    protected updated(_changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void;
    connectedCallback(): void;
    /**
   * Used to add an extra option
   * @param
   */
    addPollOption(): void;
    /**
     * Used to remove an extra option
     * @param number index
     */
    removePollOption(index: number): void;
    /**
   * Creates the poll
   */
    createPoll(): boolean;
    render(): import("lit-html").TemplateResult<1>;
    closeButtonStyle: () => {
        buttonIconTint: string | undefined;
        border: string;
        borderRadius: string;
        height: string;
        width: string;
        background: string;
    };
    addIconStyle: () => {
        buttonIconTint: string | undefined;
        border: string;
        borderRadius: string;
        height: string;
        width: string;
        background: string;
    };
    removeIconStyle: () => {
        buttonIconTint: string | undefined;
        border: string;
        borderRadius: string;
        height: string;
        width: string;
        background: string;
    };
    titleStyle: () => {
        textFont: string | undefined;
        textColor: string | undefined;
    };
    subtitleStyle: () => {
        textFont: string | undefined;
        textColor: string | undefined;
    };
    placeHolderStyle: () => {
        height: string;
        width: string;
        border: string;
        textFont: string | undefined;
        textColor: string | undefined;
        placeholderTextFont: string | undefined;
        placeholderTextColor: string | undefined;
        borderRadius: string;
        boxShadow: string;
        background: string;
    };
    optionPlaceHolderStyle: () => {
        height: string;
        width: string;
        border: string;
        textFont: string | undefined;
        textColor: string | undefined;
        placeholderTextFont: string | undefined;
        placeholderTextColor: string | undefined;
        borderRadius: string;
        boxShadow: string;
        background: string;
    };
    addIconTextStyle: () => {
        font: string | undefined;
        color: string | undefined;
    };
    buttonTextStyle: () => {
        buttonTextFont: string | undefined;
        buttonTextColor: string | undefined;
        background: string | undefined;
        border: string;
        borderRadius: string;
        height: string;
        width: string;
        display: string;
        justifyContent: string;
        alignItems: string;
    };
    createPollWrapperStyle: () => {
        height: string | undefined;
        width: string | undefined;
        background: string | undefined;
        border: string | undefined;
        borderRadius: string | undefined;
    };
    optionBorderStyle: () => {
        border: string | undefined;
        borderRadius: string | undefined;
        background: string | undefined;
    };
    questionBorderStyle: () => {
        border: string | undefined;
        borderRadius: string | undefined;
        background: string | undefined;
    };
}
declare global {
    namespace JSX {
        interface IntrinsicElements {
            'create-poll': any;
        }
    }
    interface TagNameMap {
        'create-poll': any;
    }
}
//# sourceMappingURL=create-poll.d.ts.map